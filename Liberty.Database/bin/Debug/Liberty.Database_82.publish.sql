/*
Deployment script for Liberty

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Liberty"
:setvar DefaultFilePrefix "Liberty"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL10_50.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL10_50.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Brands]...';


GO
CREATE TABLE [dbo].[Brands] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (50) NOT NULL,
    [CreatedDate]     DATETIME      NULL,
    [LastUpdatedDate] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Customers]...';


GO
CREATE TABLE [dbo].[Customers] (
    [Id]                INT           IDENTITY (1, 1) NOT NULL,
    [CompanyName]       TEXT          NOT NULL,
    [Name]              NVARCHAR (50) NOT NULL,
    [Carbon_Copy_Name]  TEXT          NULL,
    [Email]             NVARCHAR (50) NULL,
    [Carbon_Copy_Email] TEXT          NULL,
    [Telephone]         NVARCHAR (50) NULL,
    [Fax]               NVARCHAR (50) NULL,
    [CreatedDate]       DATETIME      NULL,
    [LastUpdatedDate]   DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Departments]...';


GO
CREATE TABLE [dbo].[Departments] (
    [Id]   INT           IDENTITY (1, 1) NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Employees]...';


GO
CREATE TABLE [dbo].[Employees] (
    [Id]              UNIQUEIDENTIFIER NOT NULL,
    [FirstName]       NVARCHAR (50)    NOT NULL,
    [LastName]        NVARCHAR (50)    NOT NULL,
    [Sex]             NVARCHAR (10)    NOT NULL,
    [DepartmentId]    INT              NOT NULL,
    [Code]            NVARCHAR (50)    NOT NULL,
    [Telephone]       NVARCHAR (50)    NULL,
    [Email]           NVARCHAR (50)    NULL,
    [CreatedDate]     DATETIME         NULL,
    [LastUpdatedDate] DATETIME         NULL,
    [IsDeleted]       BIT              NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Products]...';


GO
CREATE TABLE [dbo].[Products] (
    [Id]              INT            IDENTITY (1, 1) NOT NULL,
    [BrandId]         INT            NOT NULL,
    [ProductTypeId]   INT            NOT NULL,
    [Name]            NVARCHAR (128) NOT NULL,
    [Price]           DECIMAL (18)   NOT NULL,
    [Quantity]        DECIMAL (18)   NOT NULL,
    [Description]     NVARCHAR (MAX) NULL,
    [CreatedDate]     DATETIME       NULL,
    [LastUpdatedDate] DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[ProductTypes]...';


GO
CREATE TABLE [dbo].[ProductTypes] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (50) NOT NULL,
    [UnitName]        NVARCHAR (50) NOT NULL,
    [CreatedDate]     DATETIME      NULL,
    [LastUpdatedDate] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[QuotationItems]...';


GO
CREATE TABLE [dbo].[QuotationItems] (
    [Id]            INT            IDENTITY (1, 1) NOT NULL,
    [QuotationId]   INT            NOT NULL,
    [ProductName]   NVARCHAR (MAX) NOT NULL,
    [Description]   NVARCHAR (MAX) NULL,
    [OfferPrice]    DECIMAL (18)   NOT NULL,
    [OfferQuantity] DECIMAL (18)   NOT NULL,
    [ProductTypeId] INT            NOT NULL,
    [ImagePath]     NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Quotations]...';


GO
CREATE TABLE [dbo].[Quotations] (
    [Id]                INT              IDENTITY (1, 1) NOT NULL,
    [Code]              NVARCHAR (50)    NOT NULL,
    [Date]              DATETIME         NOT NULL,
    [Title]             NVARCHAR (MAX)   NOT NULL,
    [Credit]            NVARCHAR (50)    NULL,
    [BrandName]         NVARCHAR (50)    NOT NULL,
    [CustomerId]        INT              NOT NULL,
    [EmployeeId]        UNIQUEIDENTIFIER NOT NULL,
    [Revised]           BIT              NOT NULL,
    [VAT]               DECIMAL (18)     NULL,
    [Discount]          DECIMAL (18)     NULL,
    [CreatedByUserCode] NVARCHAR (50)    NOT NULL,
    [CreatedDate]       DATETIME         NOT NULL,
    [LastUpdatedDate]   DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Roles]...';


GO
CREATE TABLE [dbo].[Roles] (
    [Id]      INT           IDENTITY (1, 1) NOT NULL,
    [Name]    NVARCHAR (50) NOT NULL,
    [Name_En] NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]          UNIQUEIDENTIFIER NOT NULL,
    [Username]    NVARCHAR (50)    NOT NULL,
    [Password]    NVARCHAR (50)    NOT NULL,
    [LastLogin]   DATETIME         NULL,
    [DisplayName] NVARCHAR (50)    NOT NULL,
    [FirstName]   NVARCHAR (50)    NOT NULL,
    [LastName]    NVARCHAR (50)    NOT NULL,
    [Address]     NVARCHAR (100)   NULL,
    [Telephone]   NVARCHAR (50)    NULL,
    [Email]       NVARCHAR (50)    NULL,
    [UserCode]    NVARCHAR (50)    NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[UsersInRoles]...';


GO
CREATE TABLE [dbo].[UsersInRoles] (
    [Id]     UNIQUEIDENTIFIER NOT NULL,
    [UserId] UNIQUEIDENTIFIER NOT NULL,
    [RoleId] INT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Employees_ToDepartments]...';


GO
ALTER TABLE [dbo].[Employees]
    ADD CONSTRAINT [FK_Employees_ToDepartments] FOREIGN KEY ([DepartmentId]) REFERENCES [dbo].[Departments] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Products_ToBrands]...';


GO
ALTER TABLE [dbo].[Products]
    ADD CONSTRAINT [FK_Products_ToBrands] FOREIGN KEY ([BrandId]) REFERENCES [dbo].[Brands] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Products_ToProductTypes]...';


GO
ALTER TABLE [dbo].[Products]
    ADD CONSTRAINT [FK_Products_ToProductTypes] FOREIGN KEY ([ProductTypeId]) REFERENCES [dbo].[ProductTypes] ([Id]);


GO
PRINT N'Creating [dbo].[FK_QuotationItems_ToQuotations]...';


GO
ALTER TABLE [dbo].[QuotationItems]
    ADD CONSTRAINT [FK_QuotationItems_ToQuotations] FOREIGN KEY ([QuotationId]) REFERENCES [dbo].[Quotations] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Quotations_ToCustomers]...';


GO
ALTER TABLE [dbo].[Quotations]
    ADD CONSTRAINT [FK_Quotations_ToCustomers] FOREIGN KEY ([CustomerId]) REFERENCES [dbo].[Customers] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Quotations_ToEmployees]...';


GO
ALTER TABLE [dbo].[Quotations]
    ADD CONSTRAINT [FK_Quotations_ToEmployees] FOREIGN KEY ([EmployeeId]) REFERENCES [dbo].[Employees] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UsersInRoles_ToRoles]...';


GO
ALTER TABLE [dbo].[UsersInRoles]
    ADD CONSTRAINT [FK_UsersInRoles_ToRoles] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[Roles] ([Id]);


GO
PRINT N'Creating [dbo].[FK_UsersInRoles_ToUsers]...';


GO
ALTER TABLE [dbo].[UsersInRoles]
    ADD CONSTRAINT [FK_UsersInRoles_ToUsers] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[SearchQuotations]...';


GO
CREATE FUNCTION [dbo].[SearchQuotations]
(
	@qtCode nvarchar(100) = null,
	@companyName nvarchar(255) = null,
	@saleCode nvarchar(50) = null,
	@startDate DateTime = null,
	@endDate DateTime = null
)
RETURNS TABLE
AS
RETURN
(
	select _quot.*, row_number() Over 
				(
					order by _quot.Date asc
				) as RowNumber	
	from [dbo].Quotations as _quot
	inner join dbo.Customers as _cust
	on _cust.Id = _quot.CustomerId
	inner join dbo.Employees as _emp
	on _emp.Id = _quot.EmployeeId
	where
	(
		(
			LOWER(_quot.Code) like LOWER(@qtCode) + '%'
		)		
		or
		(
			@qtCode is null
		)	
	)
	and 
	(
		(@startDate is null)
		or
		(_quot.Date >= @startDate)
	)
	and 
	(
		(@endDate is null)
		or
		(_quot.Date <= @endDate)
	)
	and 
	(
		(@companyName is null)
		or
		(_cust.CompanyName like @companyName + '%')
	)
	and 
	(
		(@saleCode is null)
		or
		(_emp.Code like @saleCode + '%')
	)
)
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9bfc2c2c-e864-49fd-823b-9d47a8b6d52b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9bfc2c2c-e864-49fd-823b-9d47a8b6d52b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e71af761-9105-4049-9073-59145b6d1b5a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e71af761-9105-4049-9073-59145b6d1b5a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6a39274b-c9fe-4c79-af5d-c3e8543d1445')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6a39274b-c9fe-4c79-af5d-c3e8543d1445')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '885f31ac-2619-44c1-a54b-72e6cba52944')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('885f31ac-2619-44c1-a54b-72e6cba52944')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1c84dfd3-d42d-4e5a-9643-700ffc645cb7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1c84dfd3-d42d-4e5a-9643-700ffc645cb7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8e2a94b1-63c0-412c-8ffd-e6f3873f89f8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8e2a94b1-63c0-412c-8ffd-e6f3873f89f8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd9fe1447-0013-42c2-bd1c-43e76327768a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d9fe1447-0013-42c2-bd1c-43e76327768a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '32116aa9-cd86-400a-9041-42170c89baf5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('32116aa9-cd86-400a-9041-42170c89baf5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7e4a0b30-5524-495f-bbbd-9131eb6a05d8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7e4a0b30-5524-495f-bbbd-9131eb6a05d8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2de94b80-334c-47db-a0a3-b8e77328a250')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2de94b80-334c-47db-a0a3-b8e77328a250')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5b9cb4bb-9049-47dd-8fb9-95108580795c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5b9cb4bb-9049-47dd-8fb9-95108580795c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '631692db-a983-40ca-b60d-408fc0e45bdc')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('631692db-a983-40ca-b60d-408fc0e45bdc')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '57d28985-74b0-4fb7-8344-61f7cf75d20f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('57d28985-74b0-4fb7-8344-61f7cf75d20f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bd697f7d-aecc-4deb-81bb-c99249a85248')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bd697f7d-aecc-4deb-81bb-c99249a85248')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c2de411f-9cb6-4905-aa37-13d4ea3eae98')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c2de411f-9cb6-4905-aa37-13d4ea3eae98')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '41fef4bf-8575-4f92-97e9-609355429b53')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('41fef4bf-8575-4f92-97e9-609355429b53')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fcef8265-1c65-4b8a-af74-72a200b20c15')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fcef8265-1c65-4b8a-af74-72a200b20c15')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
if not exists (select * from dbo.Departments)
begin
	insert into dbo.Departments(Name) VALUES ('พนักงานขาย') 
end
if not exists (select * from dbo.Roles)
begin
	insert into dbo.Roles([Name], [Name_En]) VALUES ('ใบเสนอราคา', 'Quotations') 
	insert into dbo.Roles([Name], [Name_En]) VALUES ('ข้อมูลสินค้า', 'Product Info') 
	insert into dbo.Roles([Name], [Name_En]) VALUES ('ข้อมูลลูกค้า', 'Customer Info') 
	insert into dbo.Roles([Name], [Name_En]) VALUES ('ข้อมูลผู้ใช้ระบบ', 'User Info') 
	insert into dbo.Roles([Name], [Name_En]) VALUES ('ระบบรายงานผล', 'Reports') 
	insert into dbo.Roles([Name], [Name_En]) VALUES ('ข้อมูลพนักงาน', 'Employee Info') 
	insert into dbo.Roles([Name], [Name_En]) VALUES ('ตั้งค่าเอกสาร', 'Document Settings') 
end

if not exists (select * from dbo.Users where Id = 'd1a89a7d-c79f-4388-a65b-0eae28e38031')
begin
	insert into dbo.Users([Id], [Username], [Password], [LastLogin], [DisplayName], [FirstName], [LastName], [Address], [Telephone], [Email], [UserCode]) 
	VALUES ('d1a89a7d-c79f-4388-a65b-0eae28e38031', 'admin', 'G3g/AJS/F10=', null, 'admin', 'admin', 'admin', null, null, null, 'AD001') 
end

if not exists (select * from dbo.UsersInRoles where UserId = 'd1a89a7d-c79f-4388-a65b-0eae28e38031')
begin
	insert into dbo.UsersInRoles([Id], [UserId], [RoleId]) 
	VALUES ('198ccbcc-01bc-4198-86c8-07b8507c456c', 'd1a89a7d-c79f-4388-a65b-0eae28e38031', (select top 1 Id from dbo.Roles where Name = N'ใบเสนอราคา'))
	insert into dbo.UsersInRoles([Id], [UserId], [RoleId]) 
	VALUES ('4ef93feb-e501-4edd-8fcc-115839b163f1', 'd1a89a7d-c79f-4388-a65b-0eae28e38031', (select top 1 Id from dbo.Roles where Name = N'ข้อมูลสินค้า')) 
	insert into dbo.UsersInRoles([Id], [UserId], [RoleId]) 
	VALUES ('1468d03f-af52-457c-80e0-2ad049f84c89', 'd1a89a7d-c79f-4388-a65b-0eae28e38031', (select top 1 Id from dbo.Roles where Name = N'ข้อมูลลูกค้า')) 
	insert into dbo.UsersInRoles([Id], [UserId], [RoleId]) 
	VALUES ('2a640368-1f86-40e6-8fba-332fb3bd42b3', 'd1a89a7d-c79f-4388-a65b-0eae28e38031', (select top 1 Id from dbo.Roles where Name = N'ข้อมูลผู้ใช้ระบบ')) 
	insert into dbo.UsersInRoles([Id], [UserId], [RoleId]) 
	VALUES ('ece9e3d3-5325-406d-9148-527c4e2d68b3', 'd1a89a7d-c79f-4388-a65b-0eae28e38031', (select top 1 Id from dbo.Roles where Name = N'ระบบรายงานผล')) 
	insert into dbo.UsersInRoles([Id], [UserId], [RoleId]) 
	VALUES ('265a2c9d-41e2-4323-ba89-9aec353ed29d', 'd1a89a7d-c79f-4388-a65b-0eae28e38031', (select top 1 Id from dbo.Roles where Name = N'ข้อมูลพนักงาน')) 
	insert into dbo.UsersInRoles([Id], [UserId], [RoleId]) 
	VALUES ('73324a41-81e3-4be9-9a7b-c68007e08af7', 'd1a89a7d-c79f-4388-a65b-0eae28e38031', (select top 1 Id from dbo.Roles where Name = N'ตั้งค่าเอกสาร')) 
end
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
